{% comment %}
  KOKO - SHINKOKO GEMINI CHATBOT WIDGET
  Version: 1.3.0

  Diese Datei enthält den vollständigen Code für das Chatbot-Widget.
  Zur Installation kopieren Sie diesen Code in die `theme.liquid`-Datei Ihres Shopify-Themes,
  direkt vor dem schließenden `</body>`-Tag.

  Die Konfiguration erfolgt im <script></script>-Abschnitt weiter unten.
{% endcomment %}

<style>
  /* Stellt sicher, dass das Widget die Seitenhöhe nicht beeinflusst. */
  :root {
    --koko-chat-primary-color: #2c3e50;
    --koko-chat-button-size: 55px;
    --koko-chat-bottom-spacing: 20px;
    --koko-chat-side-spacing: 20px;
  }

  .koko-chat-widget-container {
    position: fixed;
    bottom: var(--koko-chat-bottom-spacing);
    right: var(--koko-chat-side-spacing);
    z-index: 9999;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    animation: koko-widget-slide-in 0.8s cubic-bezier(0.25, 1, 0.5, 1) 1s both;
  }

  .koko-chat-button {
    width: var(--koko-chat-button-size);
    height: var(--koko-chat-button-size);
    background-color: var(--koko-chat-primary-color);
    color: white;
    border-radius: 50%;
    border: none;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .koko-chat-button:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }

  .koko-chat-button svg {
    width: 60%;
    height: 60%;
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  .koko-chat-button .koko-icon-close {
    opacity: 0;
    transform: scale(0);
    position: absolute;
  }

  .koko-chat-widget-container.koko-chat-open .koko-chat-button .koko-icon-chat {
    opacity: 0;
    transform: scale(0);
  }
  
  .koko-chat-widget-container.koko-chat-open .koko-chat-button .koko-icon-close {
    opacity: 1;
    transform: scale(1);
  }

  .koko-chat-window {
    position: absolute;
    bottom: calc(var(--koko-chat-button-size) + 15px);
    right: 0;
    width: 350px;
    max-width: calc(100vw - (var(--koko-chat-side-spacing) * 2));
    height: 500px;
    max-height: calc(100vh - var(--koko-chat-bottom-spacing) - var(--koko-chat-button-size) - 35px);
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    opacity: 0;
    transform: translateY(20px) scale(0.95);
    transition: opacity 0.3s ease, transform 0.3s ease;
    visibility: hidden;
  }

  .koko-chat-widget-container.koko-chat-open .koko-chat-window {
    opacity: 1;
    transform: translateY(0) scale(1);
    visibility: visible;
  }

  .koko-chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: var(--koko-chat-primary-color);
    color: white;
    padding: 15px 20px;
    border-bottom: 1px solid #e0e0e0;
    flex-shrink: 0;
  }

  .koko-chat-header h3 {
    margin: 0;
    font-size: 1.1em;
    font-weight: 600;
  }
  
  .koko-chat-header p {
    margin: 4px 0 0;
    font-size: 0.8em;
    opacity: 0.9;
  }

  .koko-chat-header #koko-new-chat-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 5px;
    margin-left: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.2s ease;
  }

  .koko-chat-header #koko-new-chat-button:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }

  .koko-chat-messages {
    flex-grow: 1;
    padding: 20px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .koko-chat-message {
    max-width: 85%;
    padding: 10px 15px;
    border-radius: 18px;
    line-height: 1.5;
    word-wrap: break-word;
  }

  .koko-chat-message.koko-user {
    background-color: #f0f0f0;
    color: #333;
    align-self: flex-end;
    border-bottom-right-radius: 4px;
  }

  .koko-chat-message.koko-bot {
    background-color: var(--koko-chat-primary-color);
    color: white;
    align-self: flex-start;
    border-bottom-left-radius: 4px;
  }

  /* Stile für Links in Bot-Nachrichten zur besseren Sichtbarkeit. */
  .koko-chat-message.koko-bot a {
    color: #b2d8ff; /* Ein helles Blau, weicher als reines Weiß. */
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 3px;
    transition: all 0.2s ease;
  }

  .koko-chat-message.koko-bot a:hover {
    color: #ffffff; /* Aufhellen beim Hover */
    text-decoration-thickness: 2px;
  }
  
  .koko-chat-message.koko-bot.koko-thinking {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .koko-dot-flashing {
    position: relative;
    width: 6px;
    height: 6px;
    border-radius: 5px;
    background-color: rgba(255,255,255,0.8);
    color: rgba(255,255,255,0.8);
    animation: dotFlashing 1s infinite linear alternate;
    animation-delay: .5s;
  }

  .koko-dot-flashing::before, .koko-dot-flashing::after {
    content: '';
    display: inline-block;
    position: absolute;
    top: 0;
  }

  .koko-dot-flashing::before {
    left: -10px;
    width: 6px;
    height: 6px;
    border-radius: 5px;
    background-color: rgba(255,255,255,0.8);
    color: rgba(255,255,255,0.8);
    animation: dotFlashing 1s infinite alternate;
    animation-delay: 0s;
  }

  .koko-dot-flashing::after {
    left: 10px;
    width: 6px;
    height: 6px;
    border-radius: 5px;
    background-color: rgba(255,255,255,0.8);
    color: rgba(255,255,255,0.8);
    animation: dotFlashing 1s infinite alternate;
    animation-delay: 1s;
  }

  @keyframes dotFlashing {
    0% { background-color: rgba(255,255,255,0.8); }
    50%, 100% { background-color: rgba(255,255,255,0.3); }
  }

  .koko-chat-form {
    display: flex;
    padding: 15px;
    border-top: 1px solid #e0e0e0;
    flex-shrink: 0;
  }

  .koko-chat-form input {
    flex-grow: 1;
    border: 1px solid #ccc;
    border-radius: 20px;
    padding: 10px 15px;
    font-size: 1em;
    margin-right: 10px;
    transition: border-color 0.2s ease;
  }
  
  .koko-chat-form input:focus {
    outline: none;
    border-color: var(--koko-chat-primary-color);
  }

  .koko-chat-form button {
    background: var(--koko-chat-primary-color);
    border: none;
    color: white;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .koko-chat-form button svg {
    width: 20px;
    height: 20px;
  }
  
  @media (max-width: 480px) {
    :root {
      --koko-chat-bottom-spacing: 15px;
      --koko-chat-side-spacing: 15px;
    }
    .koko-chat-window {
      width: calc(100vw - (var(--koko-chat-side-spacing) * 2));
      height: calc(100vh - var(--koko-chat-bottom-spacing) - var(--koko-chat-button-size) - 30px);
      max-height: none;
      border-radius: 12px;
    }
  }

  /* Stile für die Willkommens-Sprechblase */
  .koko-chat-welcome-bubble {
    position: absolute;
    bottom: calc(var(--koko-chat-button-size) + 15px);
    right: 0;
    width: 300px;
    background-color: var(--koko-chat-primary-color);
    color: white;
    padding: 12px 18px;
    border-radius: 18px;
    border-bottom-right-radius: 4px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    opacity: 0;
    transform: translateY(10px) scale(0.95);
    transition: opacity 0.4s ease, transform 0.4s ease;
    visibility: hidden;
    font-size: 0.95em;
    pointer-events: none; /* Damit sie keine Klicks blockiert */
    line-height: 1.5;
  }

  .koko-chat-welcome-bubble.koko-is-visible {
    opacity: 1;
    transform: translateY(0) scale(1);
    visibility: visible;
  }

  /* Animation für das gesamte Widget */
  @keyframes koko-widget-slide-in {
    from {
      transform: translateY(calc(100% + var(--koko-chat-bottom-spacing)));
    }
    to {
      transform: translateY(0);
    }
  }
</style>

<div class="koko-chat-widget-container" id="koko-chat-widget">
  <!-- Willkommens-Sprechblase -->
  <div class="koko-chat-welcome-bubble">
    Konnichiwa! Mein Name ist Koko, Ihr virtueller Berater für authentischen japanischen Tee.
  </div>

  <!-- Chat-Fenster -->
  <div class="koko-chat-window">
    <div class="koko-chat-header">
      <div>
        <h3>Koko, Ihr Tee-Berater</h3>
        <p>Ich helfe Ihnen gerne bei Fragen zu unserem Sortiment.</p>
      </div>
      <button id="koko-new-chat-button" aria-label="Neuen Chat starten">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
          <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8V23l4-4-4-4v3z"/>
        </svg>
      </button>
    </div>
    <div class="koko-chat-messages">
      <!-- Chat-Nachrichten werden hier eingefügt -->
    </div>
    <form class="koko-chat-form">
      <input type="text" placeholder="Frage stellen..." aria-label="Ihre Nachricht" required>
      <button type="submit" aria-label="Senden">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/></svg>
      </button>
    </form>
  </div>

  <!-- Button zum Ein-/Ausblenden des Chats -->
  <button class="koko-chat-button" aria-label="Chat öffnen">
    <svg class="koko-icon-chat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/></svg>
    <svg class="koko-icon-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/></svg>
  </button>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // ###################################################################################
    // # KONFIGURATION: Passen Sie diesen Wert an Ihr Setup an.
    // ###################################################################################

    /**
     * Die vollständige URL Ihrer Vercel Serverless-Funktion.
     * @example 'https://ihr-projektname.vercel.app/api/chat'
     */
    const PROXY_SERVER_URL = 'https://kokoproxy.vercel.app/api/chat';

    // ###################################################################################
    // # WIDGET-LOGIK: Ändern Sie nichts unterhalb dieser Zeile.
    // ###################################################################################

    const chatWidget = document.getElementById('koko-chat-widget');
    const toggleButton = chatWidget.querySelector('.koko-chat-button');
    const messagesContainer = chatWidget.querySelector('.koko-chat-messages');
    const chatForm = chatWidget.querySelector('.koko-chat-form');
    const inputField = chatForm.querySelector('input');
    const newChatButton = chatWidget.querySelector('#koko-new-chat-button');

    // In-Memory-Konversationsverlauf, wird aus der sessionStorage geladen oder initialisiert.
    let conversationHistory = [];

    const hasStoredHistory = sessionStorage.getItem('koko-chat-history');
    let wasChatOpen = sessionStorage.getItem('koko-chat-open-status') === 'true'; // Prüft, ob der Chat zuvor geöffnet war.

    function saveHistory() {
      sessionStorage.setItem('koko-chat-history', JSON.stringify(conversationHistory));
    }

    function saveChatOpenStatus(isOpen) {
      sessionStorage.setItem('koko-chat-open-status', isOpen);
    }

    function resetChat() {
      if (confirm("Möchten Sie unser Gespräch zurücksetzen? Der bisherige Verlauf wird dabei gelöscht und wir können von Neuem beginnen.")) {
        // 1. Speicher und In-Memory-Daten löschen
        sessionStorage.removeItem('koko-chat-history');
        sessionStorage.removeItem('koko-chat-open-status');
        conversationHistory = [];

        // 2. Die UI-Anzeige leeren
        messagesContainer.innerHTML = '';

        // 3. Die anfängliche Willkommensnachricht wieder zum Verlauf und zur UI hinzufügen
        const initialMessage = {
          role: 'model',
          parts: [{ text: 'Herzlich willkommen bei Shinkoko. Ich bin Koko.\n\nAls Ihr persönlicher Experte für japanische Teespezialitäten stehe ich Ihnen gerne zur Seite. Haben Sie eine Frage oder suchen Sie eine Empfehlung?' }]
        };
        conversationHistory.push(initialMessage);
        addMessage(initialMessage.parts[0].text, 'bot');

        // 4. Den neuen, sauberen Zustand speichern
        saveHistory();
        saveChatOpenStatus(true); // Hält das Chat-Fenster für die sofortige Nutzung geöffnet
      }
    }

    function initializeChat() {
      if (hasStoredHistory) {
        conversationHistory = JSON.parse(hasStoredHistory);
        // Bestehende Nachrichten löschen
        messagesContainer.innerHTML = '';
        // Verlauf neu rendern
        conversationHistory.forEach(message => {
          // Die ursprüngliche Nachricht vom Modell hat eine andere Struktur.
          if (message.role === 'model') {
            addMessage(message.parts[0].text, 'bot');
          } else {
            addMessage(message.parts[0].text, message.role);
          }
        });

        // Wenn der Chat geöffnet war, öffne ihn erneut.
        if (wasChatOpen) {
          chatWidget.classList.add('koko-chat-open');
        }
        // Keine Willkommens-Sprechblase, wenn ein Verlauf existiert.

      } else {
        // Wenn kein Verlauf existiert, die anfängliche Willkommensnachricht hinzufügen
        const initialMessage = {
          role: 'model',
          parts: [{ text: 'Herzlich willkommen bei Shinkoko. Ich bin Koko.\n\nAls Ihr persönlicher Experte für japanische Teespezialitäten stehe ich Ihnen gerne zur Seite. Haben Sie eine Frage oder suchen Sie eine Empfehlung?' }]
        };
        conversationHistory.push(initialMessage);
        addMessage(initialMessage.parts[0].text, 'bot');
        saveHistory();
        saveChatOpenStatus(false); // Chat startet geschlossen, wenn kein Verlauf existiert
      }
    }

    // --- Logik für die Willkommens-Sprechblase ---
    const welcomeBubble = chatWidget.querySelector('.koko-chat-welcome-bubble');

    let showBubbleTimeout, hideBubbleTimeout;

    // Zeige die Sprechblase nur, wenn kein Verlauf existiert und der Chat nicht geöffnet ist.
    if (!hasStoredHistory && !wasChatOpen) {
      // Zeige die Sprechblase nach 3s, wenn der Chat nicht geöffnet ist.
      showBubbleTimeout = setTimeout(() => {
        if (!chatWidget.classList.contains('koko-chat-open')) {
          welcomeBubble.classList.add('koko-is-visible');
        }
      }, 3000);

      // Verberge die Sprechblase nach weiteren 10s.
      hideBubbleTimeout = setTimeout(() => {
        welcomeBubble.classList.remove('koko-is-visible');
      }, 13000); // 3s Verzögerung + 10s sichtbar
    }

    // Schaltet das Chat-Fenster zwischen geöffnet und geschlossen um.
    toggleButton.addEventListener('click', () => {
      chatWidget.classList.toggle('koko-chat-open');
      const isOpen = chatWidget.classList.contains('koko-chat-open');
      saveChatOpenStatus(isOpen);
      
      // Verberge die Willkommens-Sprechblase und lösche Timeouts, wenn der Benutzer interagiert.
      clearTimeout(showBubbleTimeout);
      clearTimeout(hideBubbleTimeout);
      welcomeBubble.classList.remove('koko-is-visible');

      if (isOpen) {
        inputField.focus();
      }
    });

    // Event-Listener für den "Neuer Chat"-Button
    newChatButton.addEventListener('click', resetChat);

    // Verarbeitet die Nachrichtenübermittlung.
    chatForm.addEventListener('submit', (event) => {
      event.preventDefault();
      const userInput = inputField.value.trim();
      if (!userInput) return;

      // Fügt die Benutzernachricht zum Verlauf und zur UI hinzu.
      addMessage(userInput, 'user');
      conversationHistory.push({ role: 'user', parts: [{ text: userInput }] });
      saveHistory();
      
      inputField.value = '';
      showThinkingIndicator();
      
      // Holt die Antwort des Bots.
      fetchBotResponse();
    });

    /**
     * Konvertiert einen Markdown-ähnlichen Text in HTML.
     * @param {string} text Der zu konvertierende Text.
     * @returns {string} Der HTML-String.
     */
    function markdownToHtml(text) {
      // 1. HTML escapen, um XSS zu verhindern.
      const escapedText = text.replace(/</g, '&lt;').replace(/>/g, '&gt;');

      // 2. Aufzählungspunkte behandeln.
      let formattedText = escapedText.replace(/^(\s*)\*\s/gm, '$1&bull; ');

      // 3. Markdown in HTML umwandeln.
      formattedText = formattedText
        .replace(/\*\*\*(.*?)\*\*\*/g, '<b><i>$1</i></b>') // Fett & Kursiv
        .replace(/\*\*(.*?)\*\*/g, '<b>$1</b>')     // Fett
        .replace(/\*(.*?)\*/g, '<i>$1</i>');      // Kursiv

      // 4. Markdown-Links in HTML-Links umwandeln.
      // Dies geschieht nach anderem Markdown, um formatierten Text innerhalb von Links zu ermöglichen
      // und um zu vermeiden, dass URLs beschädigt werden, die Sonderzeichen wie '*' enthalten könnten.
      formattedText = formattedText.replace(/\[([^\]]+)\]\((https?:\/\/[^\s)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');

      // 5. Zeilenumbrüche in <br> umwandeln.
      return formattedText.replace(/\n/g, '<br>');
    }

    /**
     * Fügt eine Nachricht zur Chat-UI hinzu.
     * @param {string} text Der Nachrichtentext.
     * @param {string} role Die Rolle der Nachricht ('user' oder 'bot').
     * @returns {HTMLElement} Das Nachrichtenelement.
     */
    function addMessage(text, role) {
      const messageElement = document.createElement('div');
      messageElement.classList.add('koko-chat-message', `koko-${role}`);
      
      if (role === 'bot') {
        messageElement.innerHTML = markdownToHtml(text);
      } else {
        messageElement.textContent = text;
      }
      
      messagesContainer.appendChild(messageElement);
      scrollToBottom();
      return messageElement;
    }
    
    // Zeigt den "Denken"-Indikator an.
    function showThinkingIndicator() {
      const indicator = document.createElement('div');
      indicator.classList.add('koko-chat-message', 'koko-bot', 'koko-thinking');
      indicator.innerHTML = '<div class="koko-dot-flashing"></div>';
      indicator.id = 'koko-thinking-indicator';
      messagesContainer.appendChild(indicator);
      scrollToBottom();
    }

    // Entfernt den "Denken"-Indikator.
    function removeThinkingIndicator() {
      const indicator = document.getElementById('koko-thinking-indicator');
      if (indicator) {
        indicator.remove();
      }
    }

    // Scrollt den Nachrichten-Container nach unten.
    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Holt die Antwort des Bots vom Proxy-Server.
    async function fetchBotResponse() {
      try {
        const response = await fetch(PROXY_SERVER_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ history: conversationHistory })
        });

        removeThinkingIndicator();

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `HTTP Error: ${response.status}`);
        }

        const data = await response.json();
        const botAnswer = data.answer;

        // Fügt die Bot-Antwort zum Verlauf und zur UI hinzu.
        addMessage(botAnswer, 'bot');
        conversationHistory.push({ role: 'model', parts: [{ text: botAnswer }] });
        saveHistory();

      } catch (error) {
        console.error('Error communicating with the chatbot server:', error);
        removeThinkingIndicator();
        const errorMessage = 'Ich bitte um einen Moment Geduld. Es ist gerade eine kleine Störung aufgetreten. Bitte senden Sie Ihre Anfrage gleich noch einmal.';
        addMessage(errorMessage, 'bot');
        conversationHistory.push({ role: 'model', parts: [{ text: errorMessage }] });
        saveHistory();
      }
    }

    initializeChat();
  });
</script>
