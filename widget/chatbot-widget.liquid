{% comment %}
  KOKO - SHINKOKO GEMINI CHATBOT WIDGET
  Version: 1.2.0

  This file contains the complete code for the chatbot widget.
  To install, copy this code into your Shopify theme's `theme.liquid` file
  right before the closing `</body>` tag.

  Configuration is done in the </script> section below.
{% endcomment %}

<style>
  /* Ensures the widget does not affect the page height. */
  :root {
    --koko-chat-primary-color: #2c3e50;
    --koko-chat-button-size: 55px;
    --koko-chat-bottom-spacing: 20px;
    --koko-chat-side-spacing: 20px;
  }

  .koko-chat-widget-container {
    position: fixed;
    bottom: var(--koko-chat-bottom-spacing);
    right: var(--koko-chat-side-spacing);
    z-index: 9999;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    animation: koko-widget-slide-in 0.8s cubic-bezier(0.25, 1, 0.5, 1) 1s both;
  }

  .koko-chat-button {
    width: var(--koko-chat-button-size);
    height: var(--koko-chat-button-size);
    background-color: var(--koko-chat-primary-color);
    color: white;
    border-radius: 50%;
    border: none;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .koko-chat-button:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }

  .koko-chat-button svg {
    width: 60%;
    height: 60%;
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  .koko-chat-button .koko-icon-close {
    opacity: 0;
    transform: scale(0);
    position: absolute;
  }

  .koko-chat-widget-container.koko-chat-open .koko-chat-button .koko-icon-chat {
    opacity: 0;
    transform: scale(0);
  }
  
  .koko-chat-widget-container.koko-chat-open .koko-chat-button .koko-icon-close {
    opacity: 1;
    transform: scale(1);
  }

  .koko-chat-window {
    position: absolute;
    bottom: calc(var(--koko-chat-button-size) + 15px);
    right: 0;
    width: 350px;
    max-width: calc(100vw - (var(--koko-chat-side-spacing) * 2));
    height: 500px;
    max-height: calc(100vh - var(--koko-chat-bottom-spacing) - var(--koko-chat-button-size) - 35px);
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    opacity: 0;
    transform: translateY(20px) scale(0.95);
    transition: opacity 0.3s ease, transform 0.3s ease;
    visibility: hidden;
  }

  .koko-chat-widget-container.koko-chat-open .koko-chat-window {
    opacity: 1;
    transform: translateY(0) scale(1);
    visibility: visible;
  }

  .koko-chat-header {
    background-color: var(--koko-chat-primary-color);
    color: white;
    padding: 15px 20px;
    border-bottom: 1px solid #e0e0e0;
    flex-shrink: 0;
  }

  .koko-chat-header h3 {
    margin: 0;
    font-size: 1.1em;
    font-weight: 600;
  }
  
  .koko-chat-header p {
    margin: 4px 0 0;
    font-size: 0.8em;
    opacity: 0.9;
  }

  .koko-chat-messages {
    flex-grow: 1;
    padding: 20px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .koko-chat-message {
    max-width: 85%;
    padding: 10px 15px;
    border-radius: 18px;
    line-height: 1.5;
    word-wrap: break-word;
  }

  .koko-chat-message.koko-user {
    background-color: #f0f0f0;
    color: #333;
    align-self: flex-end;
    border-bottom-right-radius: 4px;
  }

  .koko-chat-message.koko-bot {
    background-color: var(--koko-chat-primary-color);
    color: white;
    align-self: flex-start;
    border-bottom-left-radius: 4px;
  }
  
  .koko-chat-message.koko-bot.koko-thinking {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .koko-dot-flashing {
    position: relative;
    width: 6px;
    height: 6px;
    border-radius: 5px;
    background-color: rgba(255,255,255,0.8);
    color: rgba(255,255,255,0.8);
    animation: dotFlashing 1s infinite linear alternate;
    animation-delay: .5s;
  }

  .koko-dot-flashing::before, .koko-dot-flashing::after {
    content: '';
    display: inline-block;
    position: absolute;
    top: 0;
  }

  .koko-dot-flashing::before {
    left: -10px;
    width: 6px;
    height: 6px;
    border-radius: 5px;
    background-color: rgba(255,255,255,0.8);
    color: rgba(255,255,255,0.8);
    animation: dotFlashing 1s infinite alternate;
    animation-delay: 0s;
  }

  .koko-dot-flashing::after {
    left: 10px;
    width: 6px;
    height: 6px;
    border-radius: 5px;
    background-color: rgba(255,255,255,0.8);
    color: rgba(255,255,255,0.8);
    animation: dotFlashing 1s infinite alternate;
    animation-delay: 1s;
  }

  @keyframes dotFlashing {
    0% { background-color: rgba(255,255,255,0.8); }
    50%, 100% { background-color: rgba(255,255,255,0.3); }
  }

  .koko-chat-form {
    display: flex;
    padding: 15px;
    border-top: 1px solid #e0e0e0;
    flex-shrink: 0;
  }

  .koko-chat-form input {
    flex-grow: 1;
    border: 1px solid #ccc;
    border-radius: 20px;
    padding: 10px 15px;
    font-size: 1em;
    margin-right: 10px;
    transition: border-color 0.2s ease;
  }
  
  .koko-chat-form input:focus {
    outline: none;
    border-color: var(--koko-chat-primary-color);
  }

  .koko-chat-form button {
    background: var(--koko-chat-primary-color);
    border: none;
    color: white;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    cursor: pointer;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .koko-chat-form button svg {
    width: 20px;
    height: 20px;
  }
  
  @media (max-width: 480px) {
    :root {
      --koko-chat-bottom-spacing: 15px;
      --koko-chat-side-spacing: 15px;
    }
    .koko-chat-window {
      width: calc(100vw - (var(--koko-chat-side-spacing) * 2));
      height: calc(100vh - var(--koko-chat-bottom-spacing) - var(--koko-chat-button-size) - 30px);
      max-height: none;
      border-radius: 12px;
    }
  }

  /* Welcome Bubble Styles */
  .koko-chat-welcome-bubble {
    position: absolute;
    bottom: calc(var(--koko-chat-button-size) + 15px);
    right: 0;
    width: 300px;
    background-color: var(--koko-chat-primary-color);
    color: white;
    padding: 12px 18px;
    border-radius: 18px;
    border-bottom-right-radius: 4px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    opacity: 0;
    transform: translateY(10px) scale(0.95);
    transition: opacity 0.4s ease, transform 0.4s ease;
    visibility: hidden;
    font-size: 0.95em;
    pointer-events: none; /* So it doesn't block clicks */
    line-height: 1.5;
  }

  .koko-chat-welcome-bubble.koko-is-visible {
    opacity: 1;
    transform: translateY(0) scale(1);
    visibility: visible;
  }

  /* Animation for the whole widget */
  @keyframes koko-widget-slide-in {
    from {
      transform: translateY(calc(100% + var(--koko-chat-bottom-spacing)));
    }
    to {
      transform: translateY(0);
    }
  }
</style>

<div class="koko-chat-widget-container" id="koko-chat-widget">
  <!-- Welcome Bubble -->
  <div class="koko-chat-welcome-bubble">
    Konnichiwa! Mein Name ist Koko, Ihr virtueller Berater für authentischen japanischen Tee.
  </div>

  <!-- Chat Window -->
  <div class="koko-chat-window">
    <div class="koko-chat-header">
      <h3>Koko, Ihr Tee-Berater</h3>
      <p>Ich helfe Ihnen gerne bei Fragen zu unserem Sortiment.</p>
    </div>
    <div class="koko-chat-messages">
      <!-- Chat messages will be appended here -->
    </div>
    <form class="koko-chat-form">
      <input type="text" placeholder="Frage stellen..." aria-label="Ihre Nachricht" required>
      <button type="submit" aria-label="Senden">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/></svg>
      </button>
    </form>
  </div>

  <!-- Chat Toggle Button -->
  <button class="koko-chat-button" aria-label="Chat öffnen">
    <svg class="koko-icon-chat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/></svg>
    <svg class="koko-icon-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/></svg>
  </button>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // ###################################################################################
    // # CONFIGURATION: Adjust these two values to match your setup.
    // ###################################################################################

    /**
     * The full URL of your Vercel Serverless Function.
     * @example 'https://your-project-name.vercel.app/api/chat'
     */
    const PROXY_SERVER_URL = 'https://kokoproxy.vercel.app/api/chat';

    /**
     * The secret key for authenticating with the proxy server.
     * This value MUST match the `CHATBOT_SECRET` environment variable in Vercel.
     */
    const CHATBOT_SECRET = 'Ihr-geheimer-schluessel-hier-einfuegen';

    // ###################################################################################
    // # WIDGET LOGIC: Do not change anything below this line.
    // ###################################################################################

    const chatWidget = document.getElementById('koko-chat-widget');
    const toggleButton = chatWidget.querySelector('.koko-chat-button');
    const messagesContainer = chatWidget.querySelector('.koko-chat-messages');
    const chatForm = chatWidget.querySelector('.koko-chat-form');
    const inputField = chatForm.querySelector('input');

    // In-memory conversation history, loaded from sessionStorage or initialized.
    let conversationHistory = [];

    const hasStoredHistory = sessionStorage.getItem('koko-chat-history');
    let wasChatOpen = sessionStorage.getItem('koko-chat-open-status') === 'true'; // Check if chat was previously open

    function saveHistory() {
      sessionStorage.setItem('koko-chat-history', JSON.stringify(conversationHistory));
    }

    function saveChatOpenStatus(isOpen) {
      sessionStorage.setItem('koko-chat-open-status', isOpen);
    }

    function initializeChat() {
      if (hasStoredHistory) {
        conversationHistory = JSON.parse(hasStoredHistory);
        // Clear existing messages
        messagesContainer.innerHTML = '';
        // Re-render history
        conversationHistory.forEach(message => {
          // The initial message from the model has a different structure.
          if (message.role === 'model') {
            addMessage(message.parts[0].text, 'bot');
          } else {
            addMessage(message.parts[0].text, message.role);
          }
        });

        // If chat was open, open it again.
        if (wasChatOpen) {
          chatWidget.classList.add('koko-chat-open');
        }
        // No welcome bubble if history exists.

      } else {
        // If no history, add the initial welcome message
        const initialMessage = {
          role: 'model',
          parts: [{ text: 'Herzlich willkommen bei Shinkoko. Ich bin Koko.\n\nAls Ihr persönlicher Experte für japanische Teespezialitäten stehe ich Ihnen gerne zur Seite. Haben Sie eine Frage oder suchen Sie eine Empfehlung?' }]
        };
        conversationHistory.push(initialMessage);
        addMessage(initialMessage.parts[0].text, 'bot');
        saveHistory();
        saveChatOpenStatus(false); // Chat starts closed if no history
      }
    }

    // --- Welcome Bubble Logic ---
    const welcomeBubble = chatWidget.querySelector('.koko-chat-welcome-bubble');

    let showBubbleTimeout, hideBubbleTimeout;

    // Only show welcome bubble if no history and chat is not open.
    if (!hasStoredHistory && !wasChatOpen) {
      // Show bubble after 3s if chat is not open.
      showBubbleTimeout = setTimeout(() => {
        if (!chatWidget.classList.contains('koko-chat-open')) {
          welcomeBubble.classList.add('koko-is-visible');
        }
      }, 3000);

      // Hide bubble after another 10s.
      hideBubbleTimeout = setTimeout(() => {
        welcomeBubble.classList.remove('koko-is-visible');
      }, 13000); // 3s delay + 10s visible
    }

    // Toggle chat window open/closed.
    toggleButton.addEventListener('click', () => {
      chatWidget.classList.toggle('koko-chat-open');
      const isOpen = chatWidget.classList.contains('koko-chat-open');
      saveChatOpenStatus(isOpen);
      
      // Hide welcome bubble and clear timeouts if user interacts.
      clearTimeout(showBubbleTimeout);
      clearTimeout(hideBubbleTimeout);
      welcomeBubble.classList.remove('koko-is-visible');

      if (isOpen) {
        inputField.focus();
      }
    });

    // Handle message submission.
    chatForm.addEventListener('submit', (event) => {
      event.preventDefault();
      const userInput = inputField.value.trim();
      if (!userInput) return;

      // Add user message to history and UI.
      addMessage(userInput, 'user');
      conversationHistory.push({ role: 'user', parts: [{ text: userInput }] });
      saveHistory();
      
      inputField.value = '';
      showThinkingIndicator();
      
      // Fetch bot response.
      fetchBotResponse();
    });

    /**
     * Converts a markdown-like text to HTML.
     * @param {string} text The text to convert.
     * @returns {string} The HTML string.
     */
    function markdownToHtml(text) {
      // 1. Escape HTML to prevent XSS.
      const escapedText = text.replace(/</g, '&lt;').replace(/>/g, '&gt;');

      // 2. Handle bullet points.
      let formattedText = escapedText.replace(/^(\s*)\*\s/gm, '$1&bull; ');

      // 3. Convert markdown to HTML.
      formattedText = formattedText
        .replace(/\*\*\*(.*?)\*\*\*/g, '<b><i>$1</i></b>') // Bold & Italic
        .replace(/\*\*(.*?)\*\*/g, '<b>$1</b>')     // Bold
        .replace(/\*(.*?)\*/g, '<i>$1</i>');      // Italic

      // 4. Convert newlines to <br>.
      return formattedText.replace(/\n/g, '<br>');
    }

    /**
     * Adds a message to the chat UI.
     * @param {string} text The message text.
     * @param {string} role The message role ('user' or 'bot').
     * @returns {HTMLElement} The message element.
     */
    function addMessage(text, role) {
      const messageElement = document.createElement('div');
      messageElement.classList.add('koko-chat-message', `koko-${role}`);
      
      if (role === 'bot') {
        messageElement.innerHTML = markdownToHtml(text);
      } else {
        messageElement.textContent = text;
      }
      
      messagesContainer.appendChild(messageElement);
      scrollToBottom();
      return messageElement;
    }
    
    // Shows the thinking indicator.
    function showThinkingIndicator() {
      const indicator = document.createElement('div');
      indicator.classList.add('koko-chat-message', 'koko-bot', 'koko-thinking');
      indicator.innerHTML = '<div class="koko-dot-flashing"></div>';
      indicator.id = 'koko-thinking-indicator';
      messagesContainer.appendChild(indicator);
      scrollToBottom();
    }

    // Removes the thinking indicator.
    function removeThinkingIndicator() {
      const indicator = document.getElementById('koko-thinking-indicator');
      if (indicator) {
        indicator.remove();
      }
    }

    // Scrolls the message container to the bottom.
    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Fetches the bot response from the proxy server.
    async function fetchBotResponse() {
      try {
        const response = await fetch(PROXY_SERVER_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Chatbot-Secret': CHATBOT_SECRET
          },
          body: JSON.stringify({ history: conversationHistory })
        });

        removeThinkingIndicator();

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `HTTP Error: ${response.status}`);
        }

        const data = await response.json();
        const botAnswer = data.answer;

        // Add bot response to history and UI.
        addMessage(botAnswer, 'bot');
        conversationHistory.push({ role: 'model', parts: [{ text: botAnswer }] });
        saveHistory();

      } catch (error) {
        console.error('Error communicating with the chatbot server:', error);
        removeThinkingIndicator();
        const errorMessage = 'Ich bitte um einen Moment Geduld. Es ist gerade eine kleine Störung aufgetreten. Bitte senden Sie Ihre Anfrage gleich noch einmal.';
        addMessage(errorMessage, 'bot');
        conversationHistory.push({ role: 'model', parts: [{ text: errorMessage }] });
        saveHistory();
      }
    }

    initializeChat();
  });
</script>
